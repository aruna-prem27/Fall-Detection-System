# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3IijUW5WNDDL3s1N2bgXKfrmrHkQamp
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# Page config
st.set_page_config(page_title="Fall Detection App", layout="wide")

st.title("ðŸ§  Fall Detection System with Decision Tree")

# Load Data
@st.cache_data
def load_data():
    return pd.read_csv("glasses1_part1.csv")

data = load_data()

# Show Raw Data
st.subheader("ðŸ“„ Dataset Preview")
st.dataframe(data.head(), use_container_width=True)

# Detect sensor columns
acc_cols = [col for col in data.columns if "acc" in col.lower()]
gyro_cols = [col for col in data.columns if "gyro" in col.lower()]
label_col = "fall" if "fall" in data.columns else None

# Sensor Visualization
st.subheader("ðŸ“ˆ Sensor Data Visualization")
sensor = st.radio("Select Sensor Type", ["Accelerometer", "Gyroscope"], horizontal=True)

def plot_signals(columns, title, ylabel):
    if columns:
        fig, ax = plt.subplots()
        for col in columns:
            ax.plot(data[col], label=col)
        ax.set_title(title)
        ax.set_xlabel("Sample Index")
        ax.set_ylabel(ylabel)
        ax.legend()
        st.pyplot(fig)
    else:
        st.warning(f"No {title.lower()} columns found.")

if sensor == "Accelerometer":
    plot_signals(acc_cols, "Accelerometer Data", "Acceleration")
elif sensor == "Gyroscope":
    plot_signals(gyro_cols, "Gyroscope Data", "Gyro Value")

# Fall Detection Model
st.subheader("ðŸ§  Decision Tree Fall Detection")

if label_col:
    X = data.drop(columns=[label_col]).select_dtypes(include="number")
    y = data[label_col]

    if X.empty:
        st.error("No numeric features to train on.")
    else:
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        clf = DecisionTreeClassifier(random_state=42)
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)

        st.markdown("### âœ… Classification Report")
        st.text(classification_report(y_test, y_pred))

        st.markdown("### ðŸ“Š Confusion Matrix")
        fig, ax = plt.subplots()
        sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues", ax=ax)
        ax.set_xlabel("Predicted")
        ax.set_ylabel("Actual")
        st.pyplot(fig)
else:
    st.warning("No `fall` column found in the dataset for classification.")