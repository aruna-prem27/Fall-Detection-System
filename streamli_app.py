# -*- coding: utf-8 -*-
"""streamli_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12oPfp-KfbVDb5c_Ip55OLmQXDkAfp9L_
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# Title
st.title("üìâ Fall Detection System using Decision Tree")

# Load Data
@st.cache_data
def load_data():
    return pd.read_csv("glasses1_part1.csv")

data = load_data()
st.subheader("üìä Raw Data")
st.write(data.head())

# Check columns and assume relevant ones
st.sidebar.header("üîç Data Columns")
columns = data.columns.tolist()
st.sidebar.write(columns)

# Visualize accelerometer and gyroscope
st.subheader("üß≠ Sensor Data Visualization")
sensor_type = st.selectbox("Choose sensor type", ["Accelerometer", "Gyroscope"])

if sensor_type == "Accelerometer":
    acc_cols = [col for col in columns if "acc" in col.lower()]
    fig, ax = plt.subplots()
    for col in acc_cols:
        ax.plot(data[col], label=col)
    ax.set_title("Accelerometer Data")
    ax.set_xlabel("Time")
    ax.set_ylabel("Acceleration")
    ax.legend()
    st.pyplot(fig)

elif sensor_type == "Gyroscope":
    gyro_cols = [col for col in columns if "gyro" in col.lower()]
    fig, ax = plt.subplots()
    for col in gyro_cols:
        ax.plot(data[col], label=col)
    ax.set_title("Gyroscope Data")
    ax.set_xlabel("Time")
    ax.set_ylabel("Gyro Readings")
    ax.legend()
    st.pyplot(fig)

# Model Training
st.subheader("üß† Fall Detection with Decision Tree")

# Check if 'fall' column exists
if "fall" in data.columns:
    features = data.drop(columns=["fall"])
    labels = data["fall"]

    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

    clf = DecisionTreeClassifier()
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    st.write("### ‚úÖ Classification Report")
    st.text(classification_report(y_test, y_pred))

    st.write("### üßæ Confusion Matrix")
    fig, ax = plt.subplots()
    sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues', ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    st.pyplot(fig)
else:
    st.error("‚ùå 'fall' column not found in dataset. Please include a 'fall' label for classification.")

